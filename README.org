* About
Here I implement the original sieve as described in The Genuine
Sieve of Eratosthenes.  The wheel optimization was added, but it
had little to no effect on speed when using bit-vectors.  I imagine
the optimization is more significant with different data-structures
and laziness, I hope to explore this further.

The Genuine Sieve of Eratosthenes:
https://www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf
* Benchmark
** Trial Division to 1,000,000
Evaluation took:
  1.460 seconds of real time
  1.456000 seconds of total run time (1.456000 user, 0.000000 system)
  99.73% CPU
  5,831,768,091 processor cycles
  0 bytes consed
** Original Sieve to 10,000,000
Evaluation took:
  0.268 seconds of real time
  0.272000 seconds of total run time (0.272000 user, 0.000000 system)
  101.49% CPU
  1,073,732,061 processor cycles
  1,302,416 bytes consed
** Wheel Sieve to 10,000,000
Evaluation took:
  0.269 seconds of real time
  0.268000 seconds of total run time (0.268000 user, 0.000000 system)
  99.63% CPU
  1,074,240,975 processor cycles
  1,282,800 bytes consed
