* About
Here I implement the original sieve as described in The Genuine
Sieve of Eratosthenes.  The wheel optimization was added, but it
had little to no effect on speed when using bit-vectors.  I imagine
the optimization is more significant with different data-structures
and laziness, I hope to explore this further.

The Genuine Sieve of Eratosthenes:
https://www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf
* Benchmark
#+BEGIN_EXAMPLE
-- Trial Division to 1,000,000 --
Evaluation took:
  1.467 seconds of real time
  1.464000 seconds of total run time (1.464000 user, 0.000000 system)
  99.80% CPU
  5,857,177,713 processor cycles
  0 bytes consed
  
-- Original Sieve to 10,000,000 --
Evaluation took:
  0.270 seconds of real time
  0.272000 seconds of total run time (0.272000 user, 0.000000 system)
  100.74% CPU
  1,079,642,552 processor cycles
  1,250,032 bytes consed
  
-- Wheel Sieve to 10,000,000 --
Evaluation took:
  0.270 seconds of real time
  0.272000 seconds of total run time (0.272000 user, 0.000000 system)
  100.74% CPU
  1,079,516,087 processor cycles
  1,321,760 bytes consed
#+END_EXAMPLE
